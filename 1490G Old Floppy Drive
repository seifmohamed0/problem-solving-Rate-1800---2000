#include <bits/stdc++.h>
#include <ext/numeric>

#include<ext/pb_ds/tree_policy.hpp>
#include<ext/pb_ds/assoc_container.hpp>
#include<ext/rope>
using namespace std;
using namespace __gnu_pbds;
using namespace __gnu_cxx;
template<class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag,tree_order_statistics_node_update>;

using namespace std;
#define go ios::sync_with_stdio(0);cin.tie(nullptr);cout.tie(nullptr);
#define ll long long
typedef vector<vector<int>>vvi;
typedef complex<long double>Point;
const double Pi = acos(-1.0) , eps = 1e-8;
#define X real()
#define Y imag()
#define Angle(v) (atan2((v).Y , (v).X))
#define Length(v) ((long double)hypot((v).Y , (v).X))
#define Lengthsqr(v) (dot((v) , (v)))
const int mxn = 2e5+ 5 , mod = 1e9 + 7, MOD = 1e9 + 7 , mod2 = 998244353;

void bingo(){
	ll n , m;
	cin>>n >> m;
	vector<ll>v(n);
	ll sum = 0;
	for(int i = 0 ;i <n ;i++){
		cin>>v[i];
		sum += v[i];
		if(i)
			v[i] = max(sum , v[i - 1]);
	}
	while(m--){
		ll x;
		cin>>x;
		if(x <= v[n - 1]){
			cout<<lower_bound(v.begin() , v.end() , x) - v.begin();
		}else{
			if(sum <= 0)
				cout<<-1;
			else{
				ll cycles = (x - v[n - 1] +(sum - 1)) / sum;
				x -= cycles * sum;
				cout<<lower_bound(v.begin() , v.end() , x) - v.begin() + cycles * n;
			}
		}
		cout<<" ";
	}
	cout<<'\n';
}
int main() {
	go
#ifdef LOCAL
	freopen("input.in", "rt", stdin);
//	freopen("output.out", "wt", stdout);
#endif
	//freopen("card.in", "rt", stdin);
	int t = 1;
	cin>>t;
	while(t--){
		bingo();
	}
	return 0;
}
