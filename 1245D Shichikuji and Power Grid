    #include <bits/stdc++.h>
    using namespace std;
    struct cmp{
    	bool operator()(pair<long long,pair<long long,long long>>const&p1,pair<long long,pair<long long,long long>>const&p2)const{
    		return p1.first>p2.first;
    	}
    };
    #define dsq priority_queue< pair<long long,pair<long long,long long>>,vector< pair<long long,pair<long long,long long>> >,cmp>
    #define forn(i, n) for (int i = 0; i < (int)(n); ++i)
    #define for1(i, n) for (int i = 1; i <= (int)(n); ++i)
    #define fi first
    #define se second
    #define pb push_back
    #define all(x) (x).begin(), (x).end()
    #define what_is(x) cerr << #x << " is " << x << endl;
    typedef long long ll;
    typedef unsigned long long ull;
    typedef vector<int> vv;
    int xd[] = {1,0,-1,0,1,1,-1,-1};
    int yd[] = {0,-1,0,1,1,-1,1,-1};
    long long gcd(long long a, long long b) { return b == 0 ? a : gcd(b, a % b); }
    long long lcm(long long a, long long b) { return a * (b / gcd(a, b)); }
    inline bool isEqual(double x, double y){  const double epsilon =  1e-5 ;  return abs(x - y) <= epsilon *abs(x);}
    long double triarea(long long x1,long long y1 , long long x2 , long long y2 , long long x3 , long long  y3){return (long double)abs(x1*(y2-y3)+x2*(y3-y1)+x3*(y1-y2))/2.0;}
    bool triinside(long x1 , long y1 , long x2 , long y2 , long x3 , long y3 , long x , long y){long  area1 = triarea(x1,y1,x2,y2,x3,y3);long  area2 = triarea(x,y,x2,y2,x3,y3);long  area3 = triarea(x1,y1,x,y,x3,y3);long  area4 = triarea(x1,y1,x2,y2,x,y);if(isEqual(area1,area2+area3+area4))return true;return false;}
    long long dist(long long x1, long long y1, long long x2, long long y2) {return (x1-x2)*(x1-x2) + (y1-y2)*(y1-y2);}
    const double pi = acos(-1.0);
    long double todegree(long double radian){ if(radian<0)radian+=2*pi;return radian*180/pi;}
    long double toradian(long double degree){return degree*pi/180.0;}
    long long poww(ll x, ll k){ll ret = 1;while (k){if (k & 1) ret = (ret*x);k >>= 1; x = (x*x);}return ret;}
    long long sumOfNumbers(long long num){long long ret = 0;	while(num){ret+=num%10;num/=10;}return ret;}
    unsigned long long fact(unsigned long long n){unsigned long long sum = 1;while(n>1){sum*=n;n--;}return sum;}
    unsigned long long combination(unsigned long long a ,unsigned long long b){long long ret =1;for(int i=0;i<b;i++)ret=ret*(a-i)/(i+1);return ret;}
    long double polygon_area(int actual_size, long double x[],long double y[]){long double area = 0.0;for (int i = 0; i < actual_size; ++i){int j = (i + 1)%actual_size; area += 0.5 * (x[i]*y[j] -  x[j]*y[i]);}return (area);}
    //void Union( int x, int y){int xset = findpar(par,x);int yset = findpar(par,y);par[xset] = yset;}
    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    int  main()
    {
    	//		freopen("input.txt","r",stdin);
    	//    freopen("output.txt", "w", stdout);
    	std::ios_base::sync_with_stdio(0);
    	int n;
    	   cin>>n;
    	    vector<int> x(n), y(n);
    	    forn(i, n)
    	       cin>>x[i]>>y[i];
    	    vector<int> mh(n), k(n);
    	    forn(i, n)
    	        cin>>mh[i];
    	    forn(i, n)
    	        cin>>k[i];

    	    n++;
    	    vector<int> pre(n, n-1);
    	    vector<int> d(n, int(1e9));
    	    vector<bool> used(n);

    	    forn(i, n - 1){
    	        d[i] = mh[i];
    	    }
    	    used[n - 1] = true;

    	    long long ans = 0;
    	    vector<int> vv;
    	    vector<pair<int, int>> ee;

    	    forn(u, n - 1){
    	        int v = -1;
    	        forn(i, n)
    	        if(!used[i] && (v == -1 || d[v] > d[i]))
    	            v = i;

    	        if (pre[v] == n - 1)
    	            vv.push_back(v + 1);
    	        else
    	            ee.push_back({v + 1, pre[v] + 1});
    	        ans += d[v];

    	        used[v] = true;
    	        forn(i, n) if (!used[i]){
    	            long long dist = (k[v] + k[i])* (long long)(abs(x[v] - x[i]) + abs(y[v] - y[i]));
    	            if (dist < d[i]){
    	                d[i] = dist;
    	                pre[i] = v;
    	            }
    	        }
    	    }
    	    cout<<ans<<endl;
    	    cout<<vv.size()<<endl;
    	    for (auto it : vv)
    	        cout<<it<<" ";
    	    cout<<endl;
    	    cout<<ee.size()<<endl;
    	    for (auto it : ee)
    	        cout<<it.fi<<" "<<it.se<<endl;

    	return 0;
    }
