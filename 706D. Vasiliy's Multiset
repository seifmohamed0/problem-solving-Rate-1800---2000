#include <bits/stdc++.h>
#include <ext/numeric>

#include<ext/pb_ds/tree_policy.hpp>
#include<ext/pb_ds/assoc_container.hpp>
#include<ext/rope>
using namespace std;
using namespace __gnu_pbds;
using namespace __gnu_cxx;
template<class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag,tree_order_statistics_node_update>;
typedef tree<
pair<int,int>,
null_type,
less<pair<int,int>>,
rb_tree_tag,
tree_order_statistics_node_update>
ordered_set;
using namespace std;
#define go ios::sync_with_stdio(0);cin.tie(nullptr);cout.tie(nullptr);
#define ll long long
typedef vector<vector<int>>vvi;
typedef complex<long double>Point;
const double Pi = acos(-1.0) , eps = 1e-8;
#define X real()
#define Y imag()
#define Angle(v) (atan2((v).Y , (v).X))
#define Length(v) ((long double)hypot((v).Y , (v).X))
#define Lengthsqr(v) (dot((v) , (v)))
const int mxn = 2e5 * 33+ 5, mod = 1e9 + 7, MOD = 1e9 + 7 , mod2 = 998244353;
int tri[mxn][2] , cnt , frq[mxn][2];
void insert(int x){
	int node = 0;
	for(int i = 31 ; i >= 0; i--){
		if(x & (1 << i)){
			if(!tri[node][0]){
				tri[node][0] = ++cnt;
			}
			frq[node][0]++;
			node = tri[node][0];
		}else{
			if(!tri[node][1]){
				tri[node][1] = ++cnt;
			}
			frq[node][1]++;
			node = tri[node][1];
		}
	}
}
void del(int x){
	int node = 0;
	for(int i = 31 ; i >= 0; i--){
		if(x & (1 << i)){
			frq[node][0]--;
			node = tri[node][0];
		}else{
			frq[node][1]--;
			node = tri[node][1];
		}
	}
}
int getM(int x){
	int ret = 0 , node = 0;
	for(int i = 31 ; i >= 0 ; i--){
		if(x & (1 << i)){
			if(frq[node][1]){
				ret |= (1 << i);
				node = tri[node][1];
			}else{
				node = tri[node][0];
			}
		}else{
			if(frq[node][0]){
				ret |= (1 << i);
				node = tri[node][0];
			}else{
				node = tri[node][1];
			}
		}
	}
	return ret;
}
void bingo(){
	insert(0);
	int q ;
	cin>>q;
	while(q--){
		char c ;
		int x;
		cin>>c>>x;
		if(c == '+'){
			insert(x);
		}else if(c == '-'){
			del(x);
		}else{
			cout<<getM(x)<<'\n';
		}
	}
}
int main() {
	go
#ifdef LOCAL
	freopen("input.in", "rt", stdin);
//	freopen("output.out", "wt", stdout);
#endif
	//freopen("card.in", "rt", stdin);
	int t = 1;
	//cin>>t;
	while(t--){
		bingo();
	}
	return 0;
}

