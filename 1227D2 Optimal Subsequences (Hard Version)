#include<bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/detail/standard_policies.hpp>
using namespace std;
using namespace __gnu_pbds;
typedef tree<int, null_type, less_equal<int>, rb_tree_tag,
		tree_order_statistics_node_update> ordered_set;
typedef tree<int, null_type, less_equal<int>, rb_tree_tag,
		tree_order_statistics_node_update> indexed_multiset;
const int mxN=2e5;
int n, a[mxN], m, ans[mxN];
array<int, 2> b[mxN];
vector<array<int, 2>> c[mxN];
int main(){
	cin>>n;
	for(int i=0; i<n; i++) {
		cin>>a[i];
		b[i]={-a[i], i};
	}
	sort(b, b+n);

	cin >> m;
	for(int i=0; i<m; ++i) {
		int p , k;
		cin>>k>>p;
		k--,p--;
		c[k].push_back({p, i});
	}

	ordered_set s;
	for(int i=0; i<n; ++i) {
		s.insert(b[i][1]);
		for(array<int, 2> d : c[i])
			ans[d[1]]=a[*s.find_by_order(d[0])];
	}
	for(int i=0; i<m; i++)
		cout<<ans[i]<<endl;
    return 0;
}
