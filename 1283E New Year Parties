#include<bits/stdc++.h>
#include <stdio.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/detail/standard_policies.hpp>
using namespace std;
using namespace __gnu_pbds;
typedef tree<int, null_type, less_equal<int>, rb_tree_tag,
		tree_order_statistics_node_update> ordered_set;
typedef tree<int, null_type, less_equal<int>, rb_tree_tag,
		tree_order_statistics_node_update> indexed_multiset;
	

int n  , arr[200005] , frq[200005] , frqmn[200005],mn;
int main(){
	cin>>n;
	for(int i = 0; i< n ; i++){
		cin>>arr[i];
	}
	sort(arr,arr+n);
	int x2[] = {1,0,-1};
	for(int i = 0; i< n ;i++){
		bool found = false;
		for(int j = 0; j< 3 ; j++){
			if(frqmn[arr[i] + x2[j]]){
				found = true;
				break;
			}
		}
		if(!found){
			mn++;
			frqmn[arr[i] + x2[0]]++;
		}
	}
	cout<<mn<<" ";
	int x[] = {-1,0,1} ,mxn = 0;
	for(int i = 0; i <n ; i++){
		for(int j = 0 ; j < 3 ; j++){
			if(!frq[arr[i] + x[j]]){
				frq[arr[i] + x[j]]++;
				mxn++;
				break;
			}
		}
	}cout<<mxn;
	return 0;
	
}
