#include <bits/stdc++.h>
#include <ext/numeric>

#include<ext/pb_ds/tree_policy.hpp>
#include<ext/pb_ds/assoc_container.hpp>
#include<ext/rope>
using namespace std;
using namespace __gnu_pbds;
using namespace __gnu_cxx;
template<class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag,tree_order_statistics_node_update>;

using namespace std;
#define go ios::sync_with_stdio(0);cin.tie(nullptr);cout.tie(nullptr);
#define ll long long
typedef vector<vector<int>>vvi;
typedef complex<long double>Point;
const double Pi = acos(-1.0) , eps = 1e-8;
#define X real()
#define Y imag()
#define Angle(v) (atan2((v).Y , (v).X))
#define Length(v) ((long double)hypot((v).Y , (v).X))
#define Lengthsqr(v) (dot((v) , (v)))
const int mxn = 2e5+ 5 , mod = 1e9 + 7, MOD = 1e9 + 7 , mod2 = 998244353;
void bingo(){
	int n , k ;
	cin>>n>>k;
	vector<int>v(n) , out(n) , p(n + 1);
	set<int>st , idx;
	for(int i = 0; i <n ; i++){
		cin>>v[i];
		p[v[i]] = i;
		st.insert(i + 1);
		idx.insert(i);
	}
	int state = 0;
	while(!st.empty()){
		int curr = *st.rbegin();
		int i = p[curr];
		st.erase(curr);
		idx.erase(i);
		int rec = k;
		out[i] = state + 1;
		while(rec--){
			if(idx.empty())break;
			auto it = idx.lower_bound(i);
			if(it == idx.end())break;
			out[*it] = state + 1;
			st.erase(v[*it]);
			idx.erase(it);
		}
		rec = k;
		while(rec--){
			if(idx.empty())break;
			auto it = idx.lower_bound(i);
			if(it == idx.begin())break;
			--it;
			out[*it] = state + 1;
			st.erase(v[*it]);
			idx.erase(it);
		}
		state^=1;
	}
	for(auto it : out)
		cout<<it;
}
int main() {
	go
#ifdef LOCAL
	freopen("input.in", "rt", stdin);
//	freopen("output.out", "wt", stdout);
#endif
	//freopen("card.in", "rt", stdin);
	int t = 1;
	//cin>>t;
	while(t--){
		bingo();
	}
	return 0;
}
