    #include<bits/stdc++.h>
    #include <ext/pb_ds/assoc_container.hpp>
    #include <ext/pb_ds/tree_policy.hpp>
    #include <ext/pb_ds/detail/standard_policies.hpp>
    using namespace std;
    using namespace __gnu_pbds;
    typedef tree<int, null_type, less_equal<int>, rb_tree_tag,
    		tree_order_statistics_node_update> ordered_set;
    typedef tree<int, null_type, less_equal<int>, rb_tree_tag,
    		tree_order_statistics_node_update> indexed_multiset;
    	
     
    int n; 
    int arr[200005] , dp[200005][4]  , ans[200008];
    bool valid(int f , int s , int t){
    	if(arr[n-1]!= arr[n] && arr[1] !=arr[n]){
    		if(s==f || s== t)return false;
    	}
    	if(arr[1]!=arr[n] && s==t)return false;
    	if(arr[n-1]!=arr[n] &&f==s)return false;
    	return true;
    	
    }
    int sol(int idx , int last , int mxn){
    	if(dp[idx][last]!=-1)return dp[idx][last];
    	if(idx==n){
    		if(valid(last , 1 , 1))return mxn;
    		else if(valid(last ,2,1))return 2;
    		else if(valid(last , 3 , 1))return 3;
    	}
    	int mi = 10;
    	if(arr[idx] == arr[idx-1]){
    		mi = sol(idx + 1 , last , mxn);
    		if(last==1){
    			mi = min(mi,sol(idx + 1 , 2 ,2));
    		}else{
    			mi = min(sol(idx + 1 , 1 , mxn==2 ? 2 : 1) , mi);
    		}
    	}else{
    		if(last==1){
    			mi = min(mi , sol(idx + 1 , 2 , 2));
    		}else{
    			mi = min(mi,sol(idx +1 , 1 , mxn == 2 ? 2 : 1));
    		}
    	}
    	return dp[idx][last] = mi;
     
    }
    void build(int idx , int last , int mxn ){
     
    	if(idx==n){
    		if(valid(last , 1 , 1)){
    			ans[n] = 1;
    		}
    		else if(valid(last ,2,1))ans[n] =2;
    		else if(valid(last , 3 , 1))ans[n] = 3;
    		return;
    	}
    	int mi = 10 , op = dp[idx][last];
    	if(arr[idx] == arr[idx-1]){
    		if(sol(idx + 1 , last , mxn)==op){
    			ans[idx] = last;
    			build(idx + 1 , last , mxn);
    			return;
    		}
    		if(last==1){
    			if(sol(idx + 1 , 2 ,2)==op){
    				ans[idx] = 2;
    				build(idx + 1 , 2 , 2);
    				return;
    			}
    		}else{
    			if(sol(idx + 1 , 1 , mxn==2 ? 2 : 1)==op){
    				ans[idx] = 1;
    				build(idx+1,1,mxn==2?2:1);
    				return;
    			}
    		}
    	}else{
    		if(last==1){
    			if(sol(idx + 1 , 2 , 2)==op){
    				ans[idx] = 2;
    				build(idx+1,2,2);
    				return;
    			}
    		}else{
    			ans[idx] = 1;
    			build(idx + 1 , 1 , mxn==2?2:1);
    		}
    	}
    }
    int main(){	
    	int t ; cin>>t;
    	while(t--){
    		memset(dp,-1,sizeof(dp));
    		cin>>n;
    		for(int i = 1; i <= n ; i++){
    			cin>>arr[i];
    		}
    		cout<<sol(2 , 1 , 1)<<endl;
    		ans[1]=1;
    		build(2,1,1);
    		for(int i =1 ; i<= n; i++){
    			cout<<ans[i]<<" ";
    		}
    		cout<<endl;
     	}
    	/*
    	int t ; cin>>t;
    	while(t--){
    		set<int>ss;
    		int n ; cin>>n;
    		for(int i =1 ;i <= n ;i++){
    			cin>>arr[i];
    			ss.insert(arr[i]);
    		}
    		set<int>s;
    		ans[1] = 1;
    		s.insert(1);
    		if(ss.size() > 1){
    			ans[n] = 2;
    			s.insert(2);
    		}else{
    			ans[n] = 1;
    		}
    		for(int i = 2 ; i<= n-1 ; i++){
    			if(i==n-1){
    				if(arr[i-1]!=arr[i] &&arr[i+1]!=arr[i] &&ans[i-1]!=ans[i+1] ){
    					ans[i]=3;
    					s.insert(3);
    				}
    				else if(arr[i-1]!=arr[i] &&arr[i+1]!=arr[i]){
    					if(ans[i-1]==1){
    						ans[i] =2;s.insert(2);
    					}else{
    						ans[i] = 1;
    					}
    				}
    				else if(arr[i-1] == arr[i] &&arr[i]==arr[i+1])ans = arr[i-1];
    				else if(ans[i-1] == ans[i+1] &&ar ){
    					
    				}
    				else if(arr[i]==arr[i-1] && ans[i-1] != ans[i+1])ans[i] = ans[i-1];
    				else if(arr[i]==arr[i+1] && ans[i-1] != ans[i+1])ans[i] = ans[i+1];
    				continue;
    			}
    			if(arr[i]==arr[i-1]){
    				ans[i] = 1;
    			}else if (ans[i-1] == 1){
    				ans[i] = 2;
    				s.insert(2);
    			}else {
    				ans[i] = 1;
    			}
    		}
    		cout<<s.size()<<endl;
    		for(int i = 1 ; i <= n;  i++){
    			cout<<ans[i]<<" ";
    		}
    		cout<<endl;	
    	}
    	*/	
    	return 0;
    }
    // n*(n+1)/2
    //1 2 1 2 1 2
    //2 1 2 1 2 1 2
