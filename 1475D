#include <bits/stdc++.h>
#include<ext/pb_ds/tree_policy.hpp>
#include<ext/pb_ds/assoc_container.hpp>
#include<ext/rope>
using namespace std;
using namespace __gnu_pbds;
using namespace __gnu_cxx;
template<class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag,tree_order_statistics_node_update>;

using namespace std;
#define go ios::sync_with_stdio(0);cin.tie(nullptr);cout.tie(nullptr);
#define ll long long
const int mxn = 3e5 + 5 , mod = 1e9 + 7 , MOD = 1e9 + 7 , mod2 = 998244353;
vector<int>vi[2];
void bingo(){
	int n , m ;
	cin>>n>>m;
	int out = n*2;
	ll sum = 0;
	vector<int>v(n);
	ll sum2 = 0;
	for(int i = 0; i < n ; i++){
		cin>>v[i];
		sum2 += v[i];
	}
	for(int i = 0;i < n;i++){
		int x ;
		cin>>x; --x;
		vi[x].push_back(v[i]);
		if(!x)sum += v[i];
		if(sum >= m){
			out = min(out , (int)vi[0].size());
		}
	}
	if(sum2 < m){
		vi[0].clear();
		vi[1].clear();
		cout<<-1<<'\n';
		return;
	}
	sort(vi[0].rbegin() , vi[0].rend());
	sort(vi[1].rbegin() , vi[1].rend());
	ll t_sum = sum;
	for(int i = 0; i <= (int)vi[1].size(); i++){
		while(t_sum >= m && !vi[0].empty() && t_sum - vi[0].back() >= m){
			t_sum -= vi[0].back();
			vi[0].pop_back();
		}
		if(t_sum >= m)
			out = min(out , i * 2 + (int)vi[0].size());
		if(i < (int)vi[1].size()){
			t_sum += vi[1][i];
		}
	}
	cout<<out<<'\n';
	vi[0].clear();
	vi[1].clear();
}
int main() {
	go
#ifdef LOCAL
	freopen("input.in", "rt", stdin);
//	freopen("output.in", "wt", stdout);
#endif
	int t = 1;
	cin>>t;
	while(t--){
		bingo();
	}
	return 0;
}
