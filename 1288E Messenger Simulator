#include<bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/detail/standard_policies.hpp>
using namespace std;
using namespace __gnu_pbds;
typedef tree<pair<int,int>, null_type, less<pair<int,int>>, rb_tree_tag,
		tree_order_statistics_node_update> ordered_set;

int mx[300005], mn[300005], idx[300005];
bool ok[300005];
int main(){
	  int n, k, a;
	  cin>>n>>k;
	  ordered_set X;
	  int curr = 0;
	  for (int i = 1; i <= n; i++) {
	    X.insert({i, i});
	    mx[i] = mn[i]=idx[i] = i;
	  }
	  for (int i = 0; i < k; i++) {
	    cin>>a;
	    ok[a] = true;
	    pair<int, int> pp = {idx[a], a};
	    int val = X.order_of_key(pp);
	    mx[a] = max(mx[a], val + 1);
	    auto it = X.find(pp);
	    X.erase(it);
	    X.insert({curr, a});
	    idx[a] = curr--;
	  }
	  for (int i = 1; i <= n; i++) {
	    pair<int, int> pp = {idx[i], i};
	    int val = X.order_of_key(pp);
	    mx[i] = max(mx[i], val + 1);
	    cout<<(ok[i]?1:mn[i])<<" "<<mx[i]<<endl;
	  }
	return 0;
}
