#include<bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/detail/standard_policies.hpp>
using namespace std;
using namespace __gnu_pbds;
typedef tree<int, null_type, less_equal<int>, rb_tree_tag,
		tree_order_statistics_node_update> ordered_set;
typedef tree<int, null_type, less_equal<int>, rb_tree_tag,
		tree_order_statistics_node_update> indexed_multiset;


int x[200005];
int main(){	
    int n,m;cin>>n>>m;
    map<int,int>vis;
    queue<int>q;
    for(int i=0 ;i <n ; i++){
        cin>>x[i];
        vis[x[i]] = 0;
        q.push(x[i]);
    }
    vector<int>y;
    long long res =0 ;
    while(!q.empty()){
        int x = q.front();
        q.pop();
        if(!vis.count(x-1)){
            vis[x-1] = vis[x] +1;
            q.push(x-1);
            y.push_back(x-1);
            res += vis[x-1];
        }
        if((int)vis.size() == n+m)break;
        if(!vis.count(x+1)){
            vis[x+1] = vis[x] +1;
            q.push(x+1);
            y.push_back(x+1);
            res += vis[x+1];
        }
        if((int)vis.size() == n+m)break;
    }
    cout<<res<<endl;
    for(int i= 0;i <m ;i ++){
        cout<<y[i]<<" ";
    }
	return 0;
}
